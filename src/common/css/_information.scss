@charset 'utf-8';
@use "sass:math";
@import url("https://fonts.googleapis.com/css2?family=Noto+Serif+JP:wght@400;700&display=swap");
@import url("https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400;700&display=swap");

:root {
  --didact: "Didact Gothic", sans-serif;
  --noto: "Noto Serif JP", serif;
  --noto-sans: "Noto Sans JP", sans-serif;
  --yugo: "游ゴシック体", yugothic, "游ゴシック Medium", "Yu Gothic Medium",
    "游ゴシック", "Yu Gothic", sans-serif;
}

// pc-first
$immobile: true;
$breakMap: (
  xl: 1280,
  lg: 1024,
  md: 768,
  sm: 640,
  xs: 500,
) !default;

@function lh($fz, $lf) {
  $value: math.div($lf, $fz);
  @return $value;
}

@function ls($tracking) {
  $value: math.div($tracking, 1000);
  @return #{$value}em;
}

$default-min-bp: map-get($breakMap, md) - 1;
$default-max-bp: map-get($breakMap, xl) - 1;

@function clp(
  $minFontSize,
  $maxFontSize,
  $minViewport: 768,
  $maxViewport: 1200
) {
  $fontSizeRate: $maxFontSize - $minFontSize;
  $viewportRate: $maxViewport - $minViewport;
  $changingSize: math.div(
    math.round(math.div($fontSizeRate, $viewportRate) * 10000),
    100
  );
  $fixedSize: math.div(
    math.round(
      ($minFontSize - math.div($fontSizeRate, $viewportRate) * $minViewport) *
        62.5
    ),
    1000
  );
  $minRemFontSize: math.div(math.round($minFontSize * 62.5), 1000);
  $maxRemFontSize: math.div(math.round($maxFontSize * 62.5), 1000);
  @return clamp(
    #{$minRemFontSize}rem,
    #{$fixedSize}rem + #{$changingSize}vw,
    #{$maxRemFontSize}rem
  );
}

@function pct($small, $big, $bool: true) {
  $value: math.div($small, $big);
  $value: $value * 100;
  @if $bool {
    @return #{$value} + "%";
  } @else {
    @return #{$value} + "vw";
  }
}

$minmax: min;

@if $immobile {
  $minmax: max;
  @each $key, $value in $breakMap {
    $breakMap: map-merge(
      $breakMap,
      (
        $key: map-get($breakMap, $key) - 1,
      )
    );
  }
}

@mixin break($break: map-get($breakMap, md)) {
  @media screen and (#{$minmax}-width:#{$break}px) {
    @content;
  }
}

@mixin hover {
  @media (hover) {
    &:hover {
      @content;
    }
  }
}

@mixin font($fz, $lf, $ls) {
  font-size: $fz + px;
  line-height: lh($fz, $lf);
  letter-spacing: ls($ls);
}

// --- utilsCSS start ---

.img-wrap {
  max-width: fit-content;
  width: 100%;
  img {
    width: 100%;
  }
}

.pc-b {
  display: block !important;
  @include break() {
    display: none !important;
  }
}
.sp-b {
  display: none !important;
  @include break() {
    display: block !important;
  }
}
.pc-ib {
  display: inline-block !important;
  @include break() {
    display: none !important;
  }
}
.sp-ib {
  display: none !important;
  @include break() {
    display: inline-block !important;
  }
}
.pc-f {
  display: flex !important;
  @include break() {
    display: none !important;
  }
}
.sp-f {
  display: none !important;
  @include break() {
    display: flex !important;
  }
}

// --- utilsCSS end ---
